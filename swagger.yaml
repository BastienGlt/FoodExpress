openapi: 3.0.0
info:
  title: FoodExpress API
  description: |
    API RESTful compl√®te pour la gestion de restaurants et de leurs menus.
    
    ## Fonctionnalit√©s
    - üîê Authentification JWT
    - üë• Gestion des utilisateurs avec r√¥les (Admin/User)
    - üè™ Gestion des restaurants
    - üçΩÔ∏è Gestion des menus avec cat√©gories
    - üìÑ Pagination et tri avanc√©s
    - üîç Recherche et filtres
    
    ## Authentification
    La plupart des endpoints n√©cessitent une authentification JWT.
    Utilisez le bouton "Authorize" ci-dessus pour configurer votre token.
    
    Format: `Bearer <votre-token-jwt>`
  version: 1.0.0
  contact:
    name: Bastien
    email: support@foodexpress.com
  license:
    name: ISC
servers:
  - url: http://localhost:3000
    description: Serveur de d√©veloppement local
  - url: https://api.foodexpress.com
    description: Serveur de production

tags:
  - name: Authentification
    description: Endpoints publics pour l'inscription et la connexion
  - name: Utilisateurs
    description: Gestion des utilisateurs (n√©cessite authentification)
  - name: Restaurants
    description: Gestion des restaurants
  - name: Menus
    description: Gestion des menus des restaurants

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Entrez votre token JWT (obtenu via /users/login)

  schemas:
    # Sch√©mas pour les utilisateurs
    User:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        username:
          type: string
          example: "john_doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        role:
          type: string
          enum: [user, admin]
          example: "user"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UserRegistration:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          minLength: 3
          example: "john_doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        password:
          type: string
          minLength: 6
          example: "Password123!"
        role:
          type: string
          enum: [user, admin]
          default: user
          example: "user"

    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "john@example.com"
        password:
          type: string
          example: "Password123!"

    UserUpdate:
      type: object
      properties:
        username:
          type: string
          example: "john_doe_updated"
        email:
          type: string
          format: email
          example: "john.new@example.com"
        password:
          type: string
          example: "NewPassword123!"
        role:
          type: string
          enum: [user, admin]
          description: Seuls les admins peuvent modifier les r√¥les

    # Sch√©mas pour les restaurants
    Restaurant:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
          example: "La Bella Pizza"
        address:
          type: string
          example: "123 Rue de la Paix, 75001 Paris"
        phone:
          type: string
          example: "0123456789"
        opening_hours:
          type: string
          example: "9h-22h du lundi au samedi"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    RestaurantCreate:
      type: object
      required:
        - name
        - address
        - phone
        - opening_hours
      properties:
        name:
          type: string
          maxLength: 255
          example: "La Bella Pizza"
        address:
          type: string
          maxLength: 500
          example: "123 Rue de la Paix, 75001 Paris"
        phone:
          type: string
          maxLength: 20
          example: "0123456789"
        opening_hours:
          type: string
          maxLength: 255
          example: "9h-22h du lundi au samedi"

    RestaurantUpdate:
      type: object
      properties:
        name:
          type: string
          example: "La Bella Pizza"
        address:
          type: string
          example: "123 Rue de la Paix, 75001 Paris"
        phone:
          type: string
          example: "0123456789"
        opening_hours:
          type: string
          example: "9h-23h tous les jours"

    # Sch√©mas pour les menus
    Menu:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        restaurant_id:
          type: object
          properties:
            _id:
              type: string
            name:
              type: string
            address:
              type: string
        name:
          type: string
          example: "Pizza Margherita"
        description:
          type: string
          example: "Pizza classique avec tomate, mozzarella et basilic"
        price:
          type: number
          format: float
          example: 12.50
        category:
          type: string
          enum: [entr√©e, plat, dessert, boisson, ap√©ritif]
          example: "plat"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    MenuCreate:
      type: object
      required:
        - restaurant_id
        - name
        - description
        - price
        - category
      properties:
        restaurant_id:
          type: string
          example: "507f1f77bcf86cd799439011"
          description: ID du restaurant auquel appartient ce menu
        name:
          type: string
          maxLength: 255
          example: "Pizza Margherita"
        description:
          type: string
          maxLength: 1000
          example: "Pizza classique avec tomate, mozzarella et basilic"
        price:
          type: number
          format: float
          minimum: 0
          example: 12.50
        category:
          type: string
          enum: [entr√©e, plat, dessert, boisson, ap√©ritif]
          example: "plat"

    MenuUpdate:
      type: object
      properties:
        restaurant_id:
          type: string
          example: "507f1f77bcf86cd799439011"
        name:
          type: string
          example: "Pizza Margherita Deluxe"
        description:
          type: string
          example: "Pizza avec tomate, mozzarella, basilic et burrata"
        price:
          type: number
          format: float
          example: 15.50
        category:
          type: string
          enum: [entr√©e, plat, dessert, boisson, ap√©ritif]

    # Sch√©mas de r√©ponses
    Pagination:
      type: object
      properties:
        currentPage:
          type: integer
          example: 1
        totalPages:
          type: integer
          example: 5
        totalRestaurants:
          type: integer
          example: 48
        totalMenus:
          type: integer
          example: 48
        hasNextPage:
          type: boolean
          example: true
        hasPrevPage:
          type: boolean
          example: false
        limit:
          type: integer
          example: 10

    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: "Op√©ration r√©ussie"

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: "Une erreur est survenue"
        error:
          type: string
          example: "D√©tails de l'erreur"

paths:
  # ==================== AUTHENTIFICATION ====================
  /users/register:
    post:
      tags:
        - Authentification
      summary: Inscription d'un nouvel utilisateur
      description: Cr√©er un nouveau compte utilisateur. Le r√¥le par d√©faut est "user".
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
            examples:
              user:
                summary: Utilisateur standard
                value:
                  username: "john_doe"
                  email: "john@example.com"
                  password: "Password123!"
                  role: "user"
              admin:
                summary: Administrateur
                value:
                  username: "admin"
                  email: "admin@example.com"
                  password: "AdminPass123!"
                  role: "admin"
      responses:
        '201':
          description: Utilisateur cr√©√© avec succ√®s
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Utilisateur cr√©√© avec succ√®s"
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Donn√©es invalides ou utilisateur d√©j√† existant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "Un utilisateur avec cet email ou ce nom d'utilisateur existe d√©j√†"
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/login:
    post:
      tags:
        - Authentification
      summary: Connexion utilisateur
      description: Se connecter et obtenir un token JWT pour authentifier les requ√™tes suivantes.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
            example:
              email: "john@example.com"
              password: "Password123!"
      responses:
        '200':
          description: Connexion r√©ussie
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Connexion r√©ussie"
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Email ou mot de passe incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "Email ou mot de passe incorrect"
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ==================== UTILISATEURS ====================
  /users:
    get:
      tags:
        - Utilisateurs
      summary: Liste tous les utilisateurs
      description: R√©cup√©rer la liste de tous les utilisateurs. **R√©serv√© aux administrateurs.**
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Liste des utilisateurs r√©cup√©r√©e avec succ√®s
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Utilisateurs r√©cup√©r√©s avec succ√®s"
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '401':
          description: Token manquant ou invalide
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "Token d'acc√®s requis"
        '403':
          description: Acc√®s refus√© (non-admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "Acc√®s r√©serv√© aux administrateurs"
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    get:
      tags:
        - Utilisateurs
      summary: R√©cup√©rer un utilisateur par ID
      description: Obtenir les d√©tails d'un utilisateur sp√©cifique. Les utilisateurs peuvent uniquement voir leur propre profil, sauf les admins.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID de l'utilisateur
          example: "507f1f77bcf86cd799439011"
      responses:
        '200':
          description: Utilisateur r√©cup√©r√© avec succ√®s
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Utilisateur r√©cup√©r√© avec succ√®s"
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Non authentifi√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acc√®s refus√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "Acc√®s non autoris√©. Vous ne pouvez acc√©der qu'√† vos propres donn√©es."
        '404':
          description: Utilisateur non trouv√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "Utilisateur non trouv√©"
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Utilisateurs
      summary: Mettre √† jour un utilisateur
      description: Modifier les informations d'un utilisateur. Les utilisateurs peuvent uniquement modifier leur propre profil. Seuls les admins peuvent changer les r√¥les.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID de l'utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
            example:
              username: "john_updated"
              email: "john.new@example.com"
      responses:
        '200':
          description: Utilisateur mis √† jour avec succ√®s
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Utilisateur mis √† jour avec succ√®s"
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Non authentifi√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acc√®s refus√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Utilisateur non trouv√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Utilisateurs
      summary: Supprimer un utilisateur
      description: Supprimer un compte utilisateur. Les utilisateurs peuvent uniquement supprimer leur propre compte, sauf les admins.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID de l'utilisateur
      responses:
        '200':
          description: Utilisateur supprim√© avec succ√®s
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Utilisateur supprim√© avec succ√®s"
        '401':
          description: Non authentifi√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acc√®s refus√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Utilisateur non trouv√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ==================== RESTAURANTS ====================
  /restaurants:
    get:
      tags:
        - Restaurants
      summary: Liste tous les restaurants
      description: |
        R√©cup√©rer la liste de tous les restaurants avec pagination, tri et recherche.
        
        **Endpoint public** - Aucune authentification requise.
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Num√©ro de la page
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          description: Nombre d'√©l√©ments par page
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum: [name, address, createdAt]
            default: name
          description: Champ de tri
        - name: sortOrder
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Ordre de tri
        - name: search
          in: query
          required: false
          schema:
            type: string
          description: Recherche dans le nom ou l'adresse
          example: "Pizza"
      responses:
        '200':
          description: Liste des restaurants r√©cup√©r√©e avec succ√®s
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Restaurants r√©cup√©r√©s avec succ√®s"
                  restaurants:
                    type: array
                    items:
                      $ref: '#/components/schemas/Restaurant'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Restaurants
      summary: Cr√©er un restaurant
      description: Cr√©er un nouveau restaurant. **R√©serv√© aux administrateurs.**
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantCreate'
            example:
              name: "La Bella Pizza"
              address: "123 Rue de la Paix, 75001 Paris"
              phone: "0123456789"
              opening_hours: "9h-22h du lundi au samedi"
      responses:
        '201':
          description: Restaurant cr√©√© avec succ√®s
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Restaurant cr√©√© avec succ√®s"
                  restaurant:
                    $ref: '#/components/schemas/Restaurant'
        '400':
          description: Donn√©es invalides ou restaurant d√©j√† existant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "Un restaurant avec ce nom et cette adresse existe d√©j√†"
        '401':
          description: Non authentifi√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acc√®s refus√© (non-admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "Acc√®s r√©serv√© aux administrateurs"
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /restaurants/{id}:
    get:
      tags:
        - Restaurants
      summary: R√©cup√©rer un restaurant par ID
      description: Obtenir les d√©tails d'un restaurant sp√©cifique. **Endpoint public.**
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID du restaurant
          example: "507f1f77bcf86cd799439011"
      responses:
        '200':
          description: Restaurant r√©cup√©r√© avec succ√®s
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Restaurant r√©cup√©r√© avec succ√®s"
                  restaurant:
                    $ref: '#/components/schemas/Restaurant'
        '404':
          description: Restaurant non trouv√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "Restaurant non trouv√©"
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Restaurants
      summary: Mettre √† jour un restaurant
      description: Modifier les informations d'un restaurant. **R√©serv√© aux administrateurs.**
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID du restaurant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantUpdate'
            example:
              name: "La Bella Pizza Deluxe"
              opening_hours: "9h-23h tous les jours"
      responses:
        '200':
          description: Restaurant mis √† jour avec succ√®s
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Restaurant mis √† jour avec succ√®s"
                  restaurant:
                    $ref: '#/components/schemas/Restaurant'
        '401':
          description: Non authentifi√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acc√®s refus√© (non-admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Restaurant non trouv√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Restaurants
      summary: Supprimer un restaurant
      description: Supprimer un restaurant. **R√©serv√© aux administrateurs.**
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID du restaurant
      responses:
        '200':
          description: Restaurant supprim√© avec succ√®s
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Restaurant supprim√© avec succ√®s"
        '401':
          description: Non authentifi√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acc√®s refus√© (non-admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Restaurant non trouv√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ==================== MENUS ====================
  /menus:
    get:
      tags:
        - Menus
      summary: Liste tous les menus
      description: |
        R√©cup√©rer la liste de tous les menus avec pagination, tri, et filtres avanc√©s.
        
        **Endpoint public** - Aucune authentification requise.
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Num√©ro de la page
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          description: Nombre d'√©l√©ments par page
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum: [name, price, category, createdAt]
            default: name
          description: Champ de tri
        - name: sortOrder
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Ordre de tri
        - name: restaurant_id
          in: query
          required: false
          schema:
            type: string
          description: Filtrer par ID de restaurant
          example: "507f1f77bcf86cd799439011"
        - name: category
          in: query
          required: false
          schema:
            type: string
            enum: [entr√©e, plat, dessert, boisson, ap√©ritif]
          description: Filtrer par cat√©gorie
        - name: minPrice
          in: query
          required: false
          schema:
            type: number
            minimum: 0
          description: Prix minimum
          example: 5.00
        - name: maxPrice
          in: query
          required: false
          schema:
            type: number
            minimum: 0
          description: Prix maximum
          example: 20.00
        - name: search
          in: query
          required: false
          schema:
            type: string
          description: Recherche dans le nom ou la description
          example: "Pizza"
      responses:
        '200':
          description: Liste des menus r√©cup√©r√©e avec succ√®s
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Menus r√©cup√©r√©s avec succ√®s"
                  menus:
                    type: array
                    items:
                      $ref: '#/components/schemas/Menu'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Menus
      summary: Cr√©er un menu
      description: Cr√©er un nouveau menu pour un restaurant. **R√©serv√© aux administrateurs.**
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuCreate'
            examples:
              pizza:
                summary: Pizza
                value:
                  restaurant_id: "507f1f77bcf86cd799439011"
                  name: "Pizza Margherita"
                  description: "Pizza classique avec tomate, mozzarella et basilic"
                  price: 12.50
                  category: "plat"
              dessert:
                summary: Dessert
                value:
                  restaurant_id: "507f1f77bcf86cd799439011"
                  name: "Tiramisu"
                  description: "Dessert italien traditionnel au caf√©"
                  price: 6.50
                  category: "dessert"
      responses:
        '201':
          description: Menu cr√©√© avec succ√®s
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Menu cr√©√© avec succ√®s"
                  menu:
                    $ref: '#/components/schemas/Menu'
        '400':
          description: Donn√©es invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Non authentifi√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acc√®s refus√© (non-admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Restaurant non trouv√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "Restaurant non trouv√©"
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /menus/{id}:
    get:
      tags:
        - Menus
      summary: R√©cup√©rer un menu par ID
      description: Obtenir les d√©tails d'un menu sp√©cifique avec les informations du restaurant associ√©. **Endpoint public.**
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID du menu
          example: "507f1f77bcf86cd799439011"
      responses:
        '200':
          description: Menu r√©cup√©r√© avec succ√®s
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Menu r√©cup√©r√© avec succ√®s"
                  menu:
                    $ref: '#/components/schemas/Menu'
        '404':
          description: Menu non trouv√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "Menu non trouv√©"
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Menus
      summary: Mettre √† jour un menu
      description: Modifier les informations d'un menu. **R√©serv√© aux administrateurs.**
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID du menu
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuUpdate'
            example:
              name: "Pizza Margherita Deluxe"
              description: "Pizza avec tomate, mozzarella, basilic et burrata"
              price: 15.50
      responses:
        '200':
          description: Menu mis √† jour avec succ√®s
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Menu mis √† jour avec succ√®s"
                  menu:
                    $ref: '#/components/schemas/Menu'
        '401':
          description: Non authentifi√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acc√®s refus√© (non-admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Menu ou restaurant non trouv√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Menus
      summary: Supprimer un menu
      description: Supprimer un menu. **R√©serv√© aux administrateurs.**
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID du menu
      responses:
        '200':
          description: Menu supprim√© avec succ√®s
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Menu supprim√© avec succ√®s"
        '401':
          description: Non authentifi√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acc√®s refus√© (non-admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Menu non trouv√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /menus/restaurant/{restaurantId}:
    get:
      tags:
        - Menus
      summary: R√©cup√©rer les menus d'un restaurant
      description: |
        Obtenir tous les menus d'un restaurant sp√©cifique avec pagination et tri.
        
        **Endpoint public** - Aucune authentification requise.
      parameters:
        - name: restaurantId
          in: path
          required: true
          schema:
            type: string
          description: ID du restaurant
          example: "507f1f77bcf86cd799439011"
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Num√©ro de la page
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          description: Nombre d'√©l√©ments par page
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum: [name, price, category]
            default: category
          description: Champ de tri
        - name: sortOrder
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Ordre de tri
        - name: category
          in: query
          required: false
          schema:
            type: string
            enum: [entr√©e, plat, dessert, boisson, ap√©ritif]
          description: Filtrer par cat√©gorie
      responses:
        '200':
          description: Menus du restaurant r√©cup√©r√©s avec succ√®s
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Menus du restaurant r√©cup√©r√©s avec succ√®s"
                  restaurant:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                      address:
                        type: string
                  menus:
                    type: array
                    items:
                      $ref: '#/components/schemas/Menu'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '404':
          description: Restaurant non trouv√©
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "Restaurant non trouv√©"
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'